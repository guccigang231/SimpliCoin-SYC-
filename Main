import hashlib
import json
import time

class Block:
    def __init__(self, index, timestamp, transactions, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, time.time(), [], "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False

            if current_block.previous_hash != previous_block.hash:
                return False

        return True

class Transaction:
    def __init__(self, sender, recipient, amount):
        self.sender = sender
        self.recipient = recipient
        self.amount = amount

class SimpliCoin:
    def __init__(self):
        self.blockchain = Blockchain()
        self.pending_transactions = []

    def create_transaction(self, sender, recipient, amount):
        self.pending_transactions.append(Transaction(sender, recipient, amount))

    def mine_pending_transactions(self, miner_address):
        if not self.pending_transactions:
            return False

        new_block = Block(len(self.blockchain.chain), time.time(), self.pending_transactions, self.blockchain.get_latest_block().hash)
        new_block.previous_hash = self.blockchain.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()

        self.blockchain.add_block(new_block)
        self.pending_transactions = [Transaction(None, miner_address, 1)]  # Reward for mining
        return True

# Example Usage:
simpli_coin = SimpliCoin()
simpli_coin.create_transaction("sender_address", "recipient_address", 10)
simpli_coin.mine_pending_transactions("miner_address")
